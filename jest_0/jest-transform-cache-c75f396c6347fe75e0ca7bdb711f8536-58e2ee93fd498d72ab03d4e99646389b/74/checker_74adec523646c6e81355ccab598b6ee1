fccdbf8be6942db7df0bb21fbec094cd
'use strict'; /* istanbul ignore next */var cov_1xaq3supme = function () {var path = '/archicheck/checker.js',hash = 'a048b0389cbc9be160651ec13974c14465b74948',global = new Function('return this')(),gcv = '__coverage__',coverageData = { path: '/archicheck/checker.js', statementMap: { '0': { start: { line: 2, column: 11 }, end: { line: 2, column: 24 } }, '1': { start: { line: 3, column: 13 }, end: { line: 3, column: 28 } }, '2': { start: { line: 11, column: 2 }, end: { line: 25, column: 4 } }, '3': { start: { line: 12, column: 4 }, end: { line: 14, column: 5 } }, '4': { start: { line: 13, column: 6 }, end: { line: 13, column: 64 } }, '5': { start: { line: 15, column: 16 }, end: { line: 15, column: 18 } }, '6': { start: { line: 16, column: 19 }, end: { line: 16, column: 63 } }, '7': { start: { line: 17, column: 4 }, end: { line: 20, column: 6 } }, '8': { start: { line: 18, column: 6 }, end: { line: 18, column: 71 } }, '9': { start: { line: 19, column: 6 }, end: { line: 19, column: 12 } }, '10': { start: { line: 22, column: 4 }, end: { line: 24, column: 6 } }, '11': { start: { line: 23, column: 6 }, end: { line: 23, column: 21 } }, '12': { start: { line: 33, column: 2 }, end: { line: 36, column: 3 } }, '13': { start: { line: 35, column: 6 }, end: { line: 35, column: 76 } }, '14': { start: { line: 46, column: 2 }, end: { line: 64, column: 4 } }, '15': { start: { line: 47, column: 4 }, end: { line: 63, column: 6 } }, '16': { start: { line: 48, column: 6 }, end: { line: 51, column: 7 } }, '17': { start: { line: 49, column: 8 }, end: { line: 49, column: 21 } }, '18': { start: { line: 50, column: 8 }, end: { line: 50, column: 14 } }, '19': { start: { line: 52, column: 19 }, end: { line: 52, column: 34 } }, '20': { start: { line: 53, column: 21 }, end: { line: 53, column: 23 } }, '21': { start: { line: 54, column: 20 }, end: { line: 54, column: 53 } }, '22': { start: { line: 55, column: 18 }, end: { line: 55, column: 34 } }, '23': { start: { line: 56, column: 6 }, end: { line: 61, column: 7 } }, '24': { start: { line: 57, column: 8 }, end: { line: 59, column: 9 } }, '25': { start: { line: 58, column: 10 }, end: { line: 58, column: 33 } }, '26': { start: { line: 60, column: 8 }, end: { line: 60, column: 32 } }, '27': { start: { line: 62, column: 6 }, end: { line: 62, column: 23 } }, '28': { start: { line: 74, column: 2 }, end: { line: 91, column: 4 } }, '29': { start: { line: 75, column: 4 }, end: { line: 90, column: 6 } }, '30': { start: { line: 76, column: 6 }, end: { line: 79, column: 7 } }, '31': { start: { line: 77, column: 8 }, end: { line: 77, column: 21 } }, '32': { start: { line: 78, column: 8 }, end: { line: 78, column: 14 } }, '33': { start: { line: 80, column: 19 }, end: { line: 80, column: 34 } }, '34': { start: { line: 81, column: 20 }, end: { line: 81, column: 42 } }, '35': { start: { line: 82, column: 20 }, end: { line: 82, column: 36 } }, '36': { start: { line: 83, column: 6 }, end: { line: 89, column: 7 } }, '37': { start: { line: 84, column: 8 }, end: { line: 86, column: 9 } }, '38': { start: { line: 88, column: 8 }, end: { line: 88, column: 35 } }, '39': { start: { line: 103, column: 2 }, end: { line: 124, column: 5 } }, '40': { start: { line: 104, column: 19 }, end: { line: 104, column: 40 } }, '41': { start: { line: 106, column: 6 }, end: { line: 113, column: 7 } }, '42': { start: { line: 108, column: 10 }, end: { line: 111, column: 12 } }, '43': { start: { line: 109, column: 12 }, end: { line: 109, column: 30 } }, '44': { start: { line: 110, column: 12 }, end: { line: 110, column: 23 } }, '45': { start: { line: 116, column: 6 }, end: { line: 123, column: 7 } }, '46': { start: { line: 118, column: 10 }, end: { line: 121, column: 12 } }, '47': { start: { line: 119, column: 12 }, end: { line: 119, column: 36 } }, '48': { start: { line: 120, column: 12 }, end: { line: 120, column: 23 } }, '49': { start: { line: 133, column: 2 }, end: { line: 150, column: 4 } }, '50': { start: { line: 134, column: 4 }, end: { line: 149, column: 5 } }, '51': { start: { line: 135, column: 6 }, end: { line: 148, column: 7 } }, '52': { start: { line: 136, column: 29 }, end: { line: 136, column: 78 } }, '53': { start: { line: 136, column: 52 }, end: { line: 136, column: 77 } }, '54': { start: { line: 137, column: 8 }, end: { line: 141, column: 9 } }, '55': { start: { line: 138, column: 10 }, end: { line: 140, column: 11 } }, '56': { start: { line: 143, column: 8 }, end: { line: 147, column: 9 } }, '57': { start: { line: 144, column: 10 }, end: { line: 146, column: 11 } }, '58': { start: { line: 153, column: 0 }, end: { line: 160, column: 1 } } }, fnMap: { '0': { name: 'recurseDirectories', decl: { start: { line: 10, column: 9 }, end: { line: 10, column: 27 } }, loc: { start: { line: 10, column: 39 }, end: { line: 26, column: 1 } }, line: 10 }, '1': { name: '(anonymous_1)', decl: { start: { line: 11, column: 21 }, end: { line: 11, column: 22 } }, loc: { start: { line: 11, column: 43 }, end: { line: 25, column: 3 } }, line: 11 }, '2': { name: '(anonymous_2)', decl: { start: { line: 17, column: 22 }, end: { line: 17, column: 23 } }, loc: { start: { line: 17, column: 44 }, end: { line: 20, column: 5 } }, line: 17 }, '3': { name: '(anonymous_3)', decl: { start: { line: 22, column: 21 }, end: { line: 22, column: 22 } }, loc: { start: { line: 22, column: 27 }, end: { line: 24, column: 5 } }, line: 22 }, '4': { name: 'filterCppFiles', decl: { start: { line: 32, column: 9 }, end: { line: 32, column: 23 } }, loc: { start: { line: 32, column: 31 }, end: { line: 37, column: 1 } }, line: 32 }, '5': { name: '(anonymous_5)', decl: { start: { line: 34, column: 4 }, end: { line: 34, column: 5 } }, loc: { start: { line: 35, column: 6 }, end: { line: 35, column: 76 } }, line: 35 }, '6': { name: 'getIncludes', decl: { start: { line: 45, column: 9 }, end: { line: 45, column: 20 } }, loc: { start: { line: 45, column: 31 }, end: { line: 65, column: 1 } }, line: 45 }, '7': { name: '(anonymous_7)', decl: { start: { line: 46, column: 21 }, end: { line: 46, column: 22 } }, loc: { start: { line: 46, column: 42 }, end: { line: 64, column: 3 } }, line: 46 }, '8': { name: '(anonymous_8)', decl: { start: { line: 47, column: 26 }, end: { line: 47, column: 27 } }, loc: { start: { line: 47, column: 43 }, end: { line: 63, column: 5 } }, line: 47 }, '9': { name: 'getFileLevel', decl: { start: { line: 73, column: 9 }, end: { line: 73, column: 21 } }, loc: { start: { line: 73, column: 32 }, end: { line: 92, column: 1 } }, line: 73 }, '10': { name: '(anonymous_10)', decl: { start: { line: 74, column: 21 }, end: { line: 74, column: 22 } }, loc: { start: { line: 74, column: 42 }, end: { line: 91, column: 3 } }, line: 74 }, '11': { name: '(anonymous_11)', decl: { start: { line: 75, column: 26 }, end: { line: 75, column: 27 } }, loc: { start: { line: 75, column: 43 }, end: { line: 90, column: 5 } }, line: 75 }, '12': { name: 'buildupFileInfo', decl: { start: { line: 102, column: 9 }, end: { line: 102, column: 24 } }, loc: { start: { line: 102, column: 36 }, end: { line: 125, column: 1 } }, line: 102 }, '13': { name: '(anonymous_13)', decl: { start: { line: 104, column: 10 }, end: { line: 104, column: 11 } }, loc: { start: { line: 104, column: 19 }, end: { line: 104, column: 40 } }, line: 104 }, '14': { name: '(anonymous_14)', decl: { start: { line: 105, column: 10 }, end: { line: 105, column: 11 } }, loc: { start: { line: 106, column: 6 }, end: { line: 113, column: 7 } }, line: 106 }, '15': { name: '(anonymous_15)', decl: { start: { line: 107, column: 18 }, end: { line: 107, column: 19 } }, loc: { start: { line: 108, column: 10 }, end: { line: 111, column: 12 } }, line: 108 }, '16': { name: '(anonymous_16)', decl: { start: { line: 108, column: 39 }, end: { line: 108, column: 40 } }, loc: { start: { line: 108, column: 48 }, end: { line: 111, column: 11 } }, line: 108 }, '17': { name: '(anonymous_17)', decl: { start: { line: 115, column: 10 }, end: { line: 115, column: 11 } }, loc: { start: { line: 116, column: 6 }, end: { line: 123, column: 7 } }, line: 116 }, '18': { name: '(anonymous_18)', decl: { start: { line: 117, column: 18 }, end: { line: 117, column: 19 } }, loc: { start: { line: 118, column: 10 }, end: { line: 121, column: 12 } }, line: 118 }, '19': { name: '(anonymous_19)', decl: { start: { line: 118, column: 38 }, end: { line: 118, column: 39 } }, loc: { start: { line: 118, column: 50 }, end: { line: 121, column: 11 } }, line: 118 }, '20': { name: 'runInspection', decl: { start: { line: 132, column: 9 }, end: { line: 132, column: 22 } }, loc: { start: { line: 132, column: 34 }, end: { line: 151, column: 1 } }, line: 132 }, '21': { name: '(anonymous_21)', decl: { start: { line: 133, column: 41 }, end: { line: 133, column: 42 } }, loc: { start: { line: 133, column: 54 }, end: { line: 150, column: 3 } }, line: 133 }, '22': { name: '(anonymous_22)', decl: { start: { line: 136, column: 44 }, end: { line: 136, column: 45 } }, loc: { start: { line: 136, column: 52 }, end: { line: 136, column: 77 } }, line: 136 } }, branchMap: { '0': { loc: { start: { line: 12, column: 4 }, end: { line: 14, column: 5 } }, type: 'if', locations: [{ start: { line: 12, column: 4 }, end: { line: 14, column: 5 } }, { start: { line: 12, column: 4 }, end: { line: 14, column: 5 } }], line: 12 }, '1': { loc: { start: { line: 35, column: 6 }, end: { line: 35, column: 76 } }, type: 'binary-expr', locations: [{ start: { line: 35, column: 6 }, end: { line: 35, column: 40 } }, { start: { line: 35, column: 44 }, end: { line: 35, column: 76 } }], line: 35 }, '2': { loc: { start: { line: 48, column: 6 }, end: { line: 51, column: 7 } }, type: 'if', locations: [{ start: { line: 48, column: 6 }, end: { line: 51, column: 7 } }, { start: { line: 48, column: 6 }, end: { line: 51, column: 7 } }], line: 48 }, '3': { loc: { start: { line: 57, column: 8 }, end: { line: 59, column: 9 } }, type: 'if', locations: [{ start: { line: 57, column: 8 }, end: { line: 59, column: 9 } }, { start: { line: 57, column: 8 }, end: { line: 59, column: 9 } }], line: 57 }, '4': { loc: { start: { line: 76, column: 6 }, end: { line: 79, column: 7 } }, type: 'if', locations: [{ start: { line: 76, column: 6 }, end: { line: 79, column: 7 } }, { start: { line: 76, column: 6 }, end: { line: 79, column: 7 } }], line: 76 }, '5': { loc: { start: { line: 83, column: 6 }, end: { line: 89, column: 7 } }, type: 'if', locations: [{ start: { line: 83, column: 6 }, end: { line: 89, column: 7 } }, { start: { line: 83, column: 6 }, end: { line: 89, column: 7 } }], line: 83 }, '6': { loc: { start: { line: 137, column: 8 }, end: { line: 141, column: 9 } }, type: 'if', locations: [{ start: { line: 137, column: 8 }, end: { line: 141, column: 9 } }, { start: { line: 137, column: 8 }, end: { line: 141, column: 9 } }], line: 137 }, '7': { loc: { start: { line: 143, column: 8 }, end: { line: 147, column: 9 } }, type: 'if', locations: [{ start: { line: 143, column: 8 }, end: { line: 147, column: 9 } }, { start: { line: 143, column: 8 }, end: { line: 147, column: 9 } }], line: 143 } }, s: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0, '23': 0, '24': 0, '25': 0, '26': 0, '27': 0, '28': 0, '29': 0, '30': 0, '31': 0, '32': 0, '33': 0, '34': 0, '35': 0, '36': 0, '37': 0, '38': 0, '39': 0, '40': 0, '41': 0, '42': 0, '43': 0, '44': 0, '45': 0, '46': 0, '47': 0, '48': 0, '49': 0, '50': 0, '51': 0, '52': 0, '53': 0, '54': 0, '55': 0, '56': 0, '57': 0, '58': 0 }, f: { '0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0, '10': 0, '11': 0, '12': 0, '13': 0, '14': 0, '15': 0, '16': 0, '17': 0, '18': 0, '19': 0, '20': 0, '21': 0, '22': 0 }, b: { '0': [0, 0], '1': [0, 0], '2': [0, 0], '3': [0, 0], '4': [0, 0], '5': [0, 0], '6': [0, 0], '7': [0, 0] }, _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c' },coverage = global[gcv] || (global[gcv] = {});if (coverage[path] && coverage[path].hash === hash) {return coverage[path];}coverageData.hash = hash;return coverage[path] = coverageData;}();
const fs = /* istanbul ignore next */(cov_1xaq3supme.s[0]++, require('fs'));
const walk = /* istanbul ignore next */(cov_1xaq3supme.s[1]++, require('walk'));

/**
                                                                                  * Returns a Promise for an an array of objects containing a 
                                                                                  * filename and a path for each of the files in the given directory.
                                                                                  * @param {string} directory
                                                                                  */
function recurseDirectories(directory) {/* istanbul ignore next */cov_1xaq3supme.f[0]++;cov_1xaq3supme.s[2]++;
  return new Promise((fullfill, reject) => {/* istanbul ignore next */cov_1xaq3supme.f[1]++;cov_1xaq3supme.s[3]++;
    if (!fs.existsSync(directory)) {/* istanbul ignore next */cov_1xaq3supme.b[0][0]++;cov_1xaq3supme.s[4]++;
      reject(new Error(`Directory ${directory} does not exist`));
    } else /* istanbul ignore next */{cov_1xaq3supme.b[0][1]++;}
    let files = /* istanbul ignore next */(cov_1xaq3supme.s[5]++, []);
    const walker = /* istanbul ignore next */(cov_1xaq3supme.s[6]++, walk.walk(directory, { followLinks: false })); /* istanbul ignore next */cov_1xaq3supme.s[7]++;
    walker.on('file', (root, stat, next) => {/* istanbul ignore next */cov_1xaq3supme.f[2]++;cov_1xaq3supme.s[8]++;
      files.push({ filename: stat.name, path: root + '/' + stat.name }); /* istanbul ignore next */cov_1xaq3supme.s[9]++;
      next();
    }); /* istanbul ignore next */cov_1xaq3supme.s[10]++;

    walker.on('end', () => {/* istanbul ignore next */cov_1xaq3supme.f[3]++;cov_1xaq3supme.s[11]++;
      fullfill(files);
    });
  });
}

/**
   * Removes strings from an array that do not end in h or hpp
   * @param {object} files 
   */
function filterCppFiles(files) {/* istanbul ignore next */cov_1xaq3supme.f[4]++;cov_1xaq3supme.s[12]++;
  return files.filter(
  file =>
  {/* istanbul ignore next */cov_1xaq3supme.f[5]++;cov_1xaq3supme.s[13]++;return (/* istanbul ignore next */(cov_1xaq3supme.b[1][0]++, file.filename.slice(-4) === '.hpp') || /* istanbul ignore next */(cov_1xaq3supme.b[1][1]++, file.filename.slice(-2) === '.h'));});

}

/**
   * Returns a Promise for an array of strings that is all the filenames
   * included in a files header. Only files of the type #include "something.h" 
   * will be returned. 
   * @param {string} filepath 
   */
function getIncludes(filepath) {/* istanbul ignore next */cov_1xaq3supme.f[6]++;cov_1xaq3supme.s[14]++;
  return new Promise((resolve, reject) => {/* istanbul ignore next */cov_1xaq3supme.f[7]++;cov_1xaq3supme.s[15]++;
    fs.readFile(filepath, (error, data) => {/* istanbul ignore next */cov_1xaq3supme.f[8]++;cov_1xaq3supme.s[16]++;
      if (error) {/* istanbul ignore next */cov_1xaq3supme.b[2][0]++;cov_1xaq3supme.s[17]++;
        reject(error); /* istanbul ignore next */cov_1xaq3supme.s[18]++;
        return;
      } else /* istanbul ignore next */{cov_1xaq3supme.b[2][1]++;}
      const text = /* istanbul ignore next */(cov_1xaq3supme.s[19]++, data.toString());
      let includes = /* istanbul ignore next */(cov_1xaq3supme.s[20]++, []);
      const regex = /* istanbul ignore next */(cov_1xaq3supme.s[21]++, /#include ((<[^>]+>)|"([^"]+)")/g);
      let match = /* istanbul ignore next */(cov_1xaq3supme.s[22]++, regex.exec(text)); /* istanbul ignore next */cov_1xaq3supme.s[23]++;
      while (match != null) {/* istanbul ignore next */cov_1xaq3supme.s[24]++;
        if (match[3]) {/* istanbul ignore next */cov_1xaq3supme.b[3][0]++;cov_1xaq3supme.s[25]++;
          includes.push(match[3]);
        } else /* istanbul ignore next */{cov_1xaq3supme.b[3][1]++;}cov_1xaq3supme.s[26]++;
        match = regex.exec(text);
      } /* istanbul ignore next */cov_1xaq3supme.s[27]++;
      resolve(includes);
    });
  });
}

/**
   * Returns a Promise for the level of a file.
   * The level is extracted from the first line containing a comment
   * of the format // @level 3
   * @param {string} filepath 
   */
function getFileLevel(filepath) {/* istanbul ignore next */cov_1xaq3supme.f[9]++;cov_1xaq3supme.s[28]++;
  return new Promise((resolve, reject) => {/* istanbul ignore next */cov_1xaq3supme.f[10]++;cov_1xaq3supme.s[29]++;
    fs.readFile(filepath, (error, data) => {/* istanbul ignore next */cov_1xaq3supme.f[11]++;cov_1xaq3supme.s[30]++;
      if (error) {/* istanbul ignore next */cov_1xaq3supme.b[4][0]++;cov_1xaq3supme.s[31]++;
        reject(error); /* istanbul ignore next */cov_1xaq3supme.s[32]++;
        return;
      } else /* istanbul ignore next */{cov_1xaq3supme.b[4][1]++;}
      const text = /* istanbul ignore next */(cov_1xaq3supme.s[33]++, data.toString());
      const regex = /* istanbul ignore next */(cov_1xaq3supme.s[34]++, /\/\/\s*@level\s+(\d)/);
      const match = /* istanbul ignore next */(cov_1xaq3supme.s[35]++, regex.exec(text)); /* istanbul ignore next */cov_1xaq3supme.s[36]++;
      if (!match) {/* istanbul ignore next */cov_1xaq3supme.b[5][0]++;cov_1xaq3supme.s[37]++;
        reject(
        new Error('No // @level comment found for file at path:' + filepath));

      } else {/* istanbul ignore next */cov_1xaq3supme.b[5][1]++;cov_1xaq3supme.s[38]++;
        resolve(parseInt(match[1]));
      }
    });
  });
}

/** A composite function that builds up the following
   * data for all .h and .hpp files in the specified directory
   * and its recursive subdirectories
   * file: string
   * filepath: string
   * level: number
   * includes: string[]
   */
function buildupFileInfo(directory) {/* istanbul ignore next */cov_1xaq3supme.f[12]++;cov_1xaq3supme.s[39]++;
  return recurseDirectories(directory).
  then(files => {/* istanbul ignore next */cov_1xaq3supme.f[13]++;cov_1xaq3supme.s[40]++;return filterCppFiles(files);}).
  then(files =>
  {/* istanbul ignore next */cov_1xaq3supme.f[14]++;cov_1xaq3supme.s[41]++;return Promise.all(
    files.map(file =>
    {/* istanbul ignore next */cov_1xaq3supme.f[15]++;cov_1xaq3supme.s[42]++;return getFileLevel(file.path).then(level => {/* istanbul ignore next */cov_1xaq3supme.f[16]++;cov_1xaq3supme.s[43]++;
        file.level = level; /* istanbul ignore next */cov_1xaq3supme.s[44]++;
        return file;
      });}));

  }).

  then(files =>
  {/* istanbul ignore next */cov_1xaq3supme.f[17]++;cov_1xaq3supme.s[45]++;return Promise.all(
    files.map(file =>
    {/* istanbul ignore next */cov_1xaq3supme.f[18]++;cov_1xaq3supme.s[46]++;return getIncludes(file.path).then(includes => {/* istanbul ignore next */cov_1xaq3supme.f[19]++;cov_1xaq3supme.s[47]++;
        file.includes = includes; /* istanbul ignore next */cov_1xaq3supme.s[48]++;
        return file;
      });}));

  });

}

/**
   * Runs a full inspection on the contents of a directory, enumeratiring
   * over each file, checking its level, and the level of all its includes
   * @param {string} directory 
   */
function runInspection(directory) {/* istanbul ignore next */cov_1xaq3supme.f[20]++;cov_1xaq3supme.s[49]++;
  return buildupFileInfo(directory).then(fileInfos => {/* istanbul ignore next */cov_1xaq3supme.f[21]++;cov_1xaq3supme.s[50]++;
    for (let info of fileInfos) {/* istanbul ignore next */cov_1xaq3supme.s[51]++;
      for (let include of info.includes) {
        const includedFile = /* istanbul ignore next */(cov_1xaq3supme.s[52]++, fileInfos.find(file => {/* istanbul ignore next */cov_1xaq3supme.f[22]++;cov_1xaq3supme.s[53]++;return file.filename === include;})); /* istanbul ignore next */cov_1xaq3supme.s[54]++;
        if (!includedFile) {/* istanbul ignore next */cov_1xaq3supme.b[6][0]++;cov_1xaq3supme.s[55]++;
          throw new Error(
          `File ${include} included by ${info.filename} could not be located!`);

        } else /* istanbul ignore next */{cov_1xaq3supme.b[6][1]++;}cov_1xaq3supme.s[56]++;

        if (includedFile.level < info.level) {/* istanbul ignore next */cov_1xaq3supme.b[7][0]++;cov_1xaq3supme.s[57]++;
          throw new Error(
          `File ${info.filename} included a file from a level higher than itself, ${includedFile.filename}`);

        } else /* istanbul ignore next */{cov_1xaq3supme.b[7][1]++;}
      }
    }
  });
} /* istanbul ignore next */cov_1xaq3supme.s[58]++;

module.exports = {
  recurseDirectories,
  filterCppFiles,
  getIncludes,
  getFileLevel,
  buildupFileInfo,
  runInspection };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,