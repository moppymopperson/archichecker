4f079bc1cb96bdbd1b1ccc1ba4e3c87f
const checker = require('./checker');

describe('checker.js', () => {
  it('Finds files in nested directories', () => {
    return checker.recurseDirectories('./testdir').then(files => {
      expect(files.length).toBe(5);
    });
  });

  it('Throws an error for nonexistant directories', () => {
    return checker.recurseDirectories('asdfasdf').catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('Filters out non .h and .hpp files', () => {
    const files = checker.filterCppFiles([
    { filename: 'test.h' },
    { filename: 'test.hpp' },
    { filename: 'test.herp' }]);

    expect(files).toEqual([{ filename: 'test.h' }, { filename: 'test.hpp' }]);
  });

  it('extracts all headers from a file', () => {
    const filepath = './testdir/headerA.h';
    return checker.
    getIncludes('./testdir/nesteddir/headerB.h').
    then(includes => {
      expect(includes).toEqual(['tester.h', 'dog.h']);
    });
  });

  it('throws an error if the getIncludes path is bad', () => {
    return checker.getIncludes('asfdasdf').catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('extracts file level form a header', () => {
    const filepath = './testdir/nesteddir/headerB.h';
    return checker.getFileLevel(filepath).then(level => {
      expect(level).toBe(5);
    });
  });

  it('throws and error if there is a header missing a level', () => {
    const filepath = './testdir3/headerX.h';
    return checker.getFileLevel(filepath).catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('throws an error if the file does not exist', () => {
    const filepath = 'asdf.psd';
    return checker.getFileLevel(filepath).catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('builds up file info correctly', () => {
    return checker.buildupFileInfo('./testdir').then(fileInfos => {
      expect(fileInfos).toEqual([
      {
        filename: 'headerA.h',
        path: './testdir/headerA.h',
        level: 1,
        includes: ['headerB.h'] },

      {
        filename: 'headerB.h',
        path: './testdir/nesteddir/headerB.h',
        level: 5,
        includes: ['tester.h', 'dog.h'] }]);


    });
  });

  it('detects missing files', () => {
    return checker.runInspection('./testdir').catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('detects when levels are mismatched', () => {
    return checker.runInspection('./testdir4').catch(error => {
      expect(error).toBeDefined();
    });
  });

  it('passes when everything is okay', () => {
    return expect(checker.runInspection('./testdir2')).resolves.toBe();
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNoZWNrZXIudGVzdC5qcyJdLCJuYW1lcyI6WyJjaGVja2VyIiwicmVxdWlyZSIsImRlc2NyaWJlIiwiaXQiLCJyZWN1cnNlRGlyZWN0b3JpZXMiLCJ0aGVuIiwiZmlsZXMiLCJleHBlY3QiLCJsZW5ndGgiLCJ0b0JlIiwiY2F0Y2giLCJlcnJvciIsInRvQmVEZWZpbmVkIiwiZmlsdGVyQ3BwRmlsZXMiLCJmaWxlbmFtZSIsInRvRXF1YWwiLCJmaWxlcGF0aCIsImdldEluY2x1ZGVzIiwiaW5jbHVkZXMiLCJnZXRGaWxlTGV2ZWwiLCJsZXZlbCIsImJ1aWxkdXBGaWxlSW5mbyIsImZpbGVJbmZvcyIsInBhdGgiLCJydW5JbnNwZWN0aW9uIiwicmVzb2x2ZXMiXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQVVDLFFBQVEsV0FBUixDQUFoQjs7QUFFQUMsU0FBUyxZQUFULEVBQXVCLE1BQU07QUFDM0JDLEtBQUcsbUNBQUgsRUFBd0MsTUFBTTtBQUM1QyxXQUFPSCxRQUFRSSxrQkFBUixDQUEyQixXQUEzQixFQUF3Q0MsSUFBeEMsQ0FBNkNDLFNBQVM7QUFDM0RDLGFBQU9ELE1BQU1FLE1BQWIsRUFBcUJDLElBQXJCLENBQTBCLENBQTFCO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDs7QUFNQU4sS0FBRyw2Q0FBSCxFQUFrRCxNQUFNO0FBQ3RELFdBQU9ILFFBQVFJLGtCQUFSLENBQTJCLFVBQTNCLEVBQXVDTSxLQUF2QyxDQUE2Q0MsU0FBUztBQUMzREosYUFBT0ksS0FBUCxFQUFjQyxXQUFkO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDs7QUFNQVQsS0FBRyxtQ0FBSCxFQUF3QyxNQUFNO0FBQzVDLFVBQU1HLFFBQVFOLFFBQVFhLGNBQVIsQ0FBdUI7QUFDbkMsTUFBRUMsVUFBVSxRQUFaLEVBRG1DO0FBRW5DLE1BQUVBLFVBQVUsVUFBWixFQUZtQztBQUduQyxNQUFFQSxVQUFVLFdBQVosRUFIbUMsQ0FBdkIsQ0FBZDs7QUFLQVAsV0FBT0QsS0FBUCxFQUFjUyxPQUFkLENBQXNCLENBQUMsRUFBRUQsVUFBVSxRQUFaLEVBQUQsRUFBeUIsRUFBRUEsVUFBVSxVQUFaLEVBQXpCLENBQXRCO0FBQ0QsR0FQRDs7QUFTQVgsS0FBRyxrQ0FBSCxFQUF1QyxNQUFNO0FBQzNDLFVBQU1hLFdBQVcscUJBQWpCO0FBQ0EsV0FBT2hCO0FBQ0ppQixlQURJLENBQ1EsK0JBRFI7QUFFSlosUUFGSSxDQUVDYSxZQUFZO0FBQ2hCWCxhQUFPVyxRQUFQLEVBQWlCSCxPQUFqQixDQUF5QixDQUFDLFVBQUQsRUFBYSxPQUFiLENBQXpCO0FBQ0QsS0FKSSxDQUFQO0FBS0QsR0FQRDs7QUFTQVosS0FBRyxnREFBSCxFQUFxRCxNQUFNO0FBQ3pELFdBQU9ILFFBQVFpQixXQUFSLENBQW9CLFVBQXBCLEVBQWdDUCxLQUFoQyxDQUFzQ0MsU0FBUztBQUNwREosYUFBT0ksS0FBUCxFQUFjQyxXQUFkO0FBQ0QsS0FGTSxDQUFQO0FBR0QsR0FKRDs7QUFNQVQsS0FBRyxtQ0FBSCxFQUF3QyxNQUFNO0FBQzVDLFVBQU1hLFdBQVcsK0JBQWpCO0FBQ0EsV0FBT2hCLFFBQVFtQixZQUFSLENBQXFCSCxRQUFyQixFQUErQlgsSUFBL0IsQ0FBb0NlLFNBQVM7QUFDbERiLGFBQU9hLEtBQVAsRUFBY1gsSUFBZCxDQUFtQixDQUFuQjtBQUNELEtBRk0sQ0FBUDtBQUdELEdBTEQ7O0FBT0FOLEtBQUcsdURBQUgsRUFBNEQsTUFBTTtBQUNoRSxVQUFNYSxXQUFXLHNCQUFqQjtBQUNBLFdBQU9oQixRQUFRbUIsWUFBUixDQUFxQkgsUUFBckIsRUFBK0JOLEtBQS9CLENBQXFDQyxTQUFTO0FBQ25ESixhQUFPSSxLQUFQLEVBQWNDLFdBQWQ7QUFDRCxLQUZNLENBQVA7QUFHRCxHQUxEOztBQU9BVCxLQUFHLDRDQUFILEVBQWlELE1BQU07QUFDckQsVUFBTWEsV0FBVyxVQUFqQjtBQUNBLFdBQU9oQixRQUFRbUIsWUFBUixDQUFxQkgsUUFBckIsRUFBK0JOLEtBQS9CLENBQXFDQyxTQUFTO0FBQ25ESixhQUFPSSxLQUFQLEVBQWNDLFdBQWQ7QUFDRCxLQUZNLENBQVA7QUFHRCxHQUxEOztBQU9BVCxLQUFHLCtCQUFILEVBQW9DLE1BQU07QUFDeEMsV0FBT0gsUUFBUXFCLGVBQVIsQ0FBd0IsV0FBeEIsRUFBcUNoQixJQUFyQyxDQUEwQ2lCLGFBQWE7QUFDNURmLGFBQU9lLFNBQVAsRUFBa0JQLE9BQWxCLENBQTBCO0FBQ3hCO0FBQ0VELGtCQUFVLFdBRFo7QUFFRVMsY0FBTSxxQkFGUjtBQUdFSCxlQUFPLENBSFQ7QUFJRUYsa0JBQVUsQ0FBQyxXQUFELENBSlosRUFEd0I7O0FBT3hCO0FBQ0VKLGtCQUFVLFdBRFo7QUFFRVMsY0FBTSwrQkFGUjtBQUdFSCxlQUFPLENBSFQ7QUFJRUYsa0JBQVUsQ0FBQyxVQUFELEVBQWEsT0FBYixDQUpaLEVBUHdCLENBQTFCOzs7QUFjRCxLQWZNLENBQVA7QUFnQkQsR0FqQkQ7O0FBbUJBZixLQUFHLHVCQUFILEVBQTRCLE1BQU07QUFDaEMsV0FBT0gsUUFBUXdCLGFBQVIsQ0FBc0IsV0FBdEIsRUFBbUNkLEtBQW5DLENBQXlDQyxTQUFTO0FBQ3ZESixhQUFPSSxLQUFQLEVBQWNDLFdBQWQ7QUFDRCxLQUZNLENBQVA7QUFHRCxHQUpEOztBQU1BVCxLQUFHLG9DQUFILEVBQXlDLE1BQU07QUFDN0MsV0FBT0gsUUFBUXdCLGFBQVIsQ0FBc0IsWUFBdEIsRUFBb0NkLEtBQXBDLENBQTBDQyxTQUFTO0FBQ3hESixhQUFPSSxLQUFQLEVBQWNDLFdBQWQ7QUFDRCxLQUZNLENBQVA7QUFHRCxHQUpEOztBQU1BVCxLQUFHLGdDQUFILEVBQXFDLE1BQU07QUFDekMsV0FBT0ksT0FBT1AsUUFBUXdCLGFBQVIsQ0FBc0IsWUFBdEIsQ0FBUCxFQUE0Q0MsUUFBNUMsQ0FBcURoQixJQUFyRCxFQUFQO0FBQ0QsR0FGRDtBQUdELENBNUZEIiwiZmlsZSI6ImNoZWNrZXIudGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNoZWNrZXIgPSByZXF1aXJlKCcuL2NoZWNrZXInKVxuXG5kZXNjcmliZSgnY2hlY2tlci5qcycsICgpID0+IHtcbiAgaXQoJ0ZpbmRzIGZpbGVzIGluIG5lc3RlZCBkaXJlY3RvcmllcycsICgpID0+IHtcbiAgICByZXR1cm4gY2hlY2tlci5yZWN1cnNlRGlyZWN0b3JpZXMoJy4vdGVzdGRpcicpLnRoZW4oZmlsZXMgPT4ge1xuICAgICAgZXhwZWN0KGZpbGVzLmxlbmd0aCkudG9CZSg1KVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ1Rocm93cyBhbiBlcnJvciBmb3Igbm9uZXhpc3RhbnQgZGlyZWN0b3JpZXMnLCAoKSA9PiB7XG4gICAgcmV0dXJuIGNoZWNrZXIucmVjdXJzZURpcmVjdG9yaWVzKCdhc2RmYXNkZicpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZURlZmluZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ0ZpbHRlcnMgb3V0IG5vbiAuaCBhbmQgLmhwcCBmaWxlcycsICgpID0+IHtcbiAgICBjb25zdCBmaWxlcyA9IGNoZWNrZXIuZmlsdGVyQ3BwRmlsZXMoW1xuICAgICAgeyBmaWxlbmFtZTogJ3Rlc3QuaCcgfSxcbiAgICAgIHsgZmlsZW5hbWU6ICd0ZXN0LmhwcCcgfSxcbiAgICAgIHsgZmlsZW5hbWU6ICd0ZXN0LmhlcnAnIH1cbiAgICBdKVxuICAgIGV4cGVjdChmaWxlcykudG9FcXVhbChbeyBmaWxlbmFtZTogJ3Rlc3QuaCcgfSwgeyBmaWxlbmFtZTogJ3Rlc3QuaHBwJyB9XSlcbiAgfSlcblxuICBpdCgnZXh0cmFjdHMgYWxsIGhlYWRlcnMgZnJvbSBhIGZpbGUnLCAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXBhdGggPSAnLi90ZXN0ZGlyL2hlYWRlckEuaCdcbiAgICByZXR1cm4gY2hlY2tlclxuICAgICAgLmdldEluY2x1ZGVzKCcuL3Rlc3RkaXIvbmVzdGVkZGlyL2hlYWRlckIuaCcpXG4gICAgICAudGhlbihpbmNsdWRlcyA9PiB7XG4gICAgICAgIGV4cGVjdChpbmNsdWRlcykudG9FcXVhbChbJ3Rlc3Rlci5oJywgJ2RvZy5oJ10pXG4gICAgICB9KVxuICB9KVxuXG4gIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIGdldEluY2x1ZGVzIHBhdGggaXMgYmFkJywgKCkgPT4ge1xuICAgIHJldHVybiBjaGVja2VyLmdldEluY2x1ZGVzKCdhc2ZkYXNkZicpLmNhdGNoKGVycm9yID0+IHtcbiAgICAgIGV4cGVjdChlcnJvcikudG9CZURlZmluZWQoKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2V4dHJhY3RzIGZpbGUgbGV2ZWwgZm9ybSBhIGhlYWRlcicsICgpID0+IHtcbiAgICBjb25zdCBmaWxlcGF0aCA9ICcuL3Rlc3RkaXIvbmVzdGVkZGlyL2hlYWRlckIuaCdcbiAgICByZXR1cm4gY2hlY2tlci5nZXRGaWxlTGV2ZWwoZmlsZXBhdGgpLnRoZW4obGV2ZWwgPT4ge1xuICAgICAgZXhwZWN0KGxldmVsKS50b0JlKDUpXG4gICAgfSlcbiAgfSlcblxuICBpdCgndGhyb3dzIGFuZCBlcnJvciBpZiB0aGVyZSBpcyBhIGhlYWRlciBtaXNzaW5nIGEgbGV2ZWwnLCAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXBhdGggPSAnLi90ZXN0ZGlyMy9oZWFkZXJYLmgnXG4gICAgcmV0dXJuIGNoZWNrZXIuZ2V0RmlsZUxldmVsKGZpbGVwYXRoKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCd0aHJvd3MgYW4gZXJyb3IgaWYgdGhlIGZpbGUgZG9lcyBub3QgZXhpc3QnLCAoKSA9PiB7XG4gICAgY29uc3QgZmlsZXBhdGggPSAnYXNkZi5wc2QnXG4gICAgcmV0dXJuIGNoZWNrZXIuZ2V0RmlsZUxldmVsKGZpbGVwYXRoKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdidWlsZHMgdXAgZmlsZSBpbmZvIGNvcnJlY3RseScsICgpID0+IHtcbiAgICByZXR1cm4gY2hlY2tlci5idWlsZHVwRmlsZUluZm8oJy4vdGVzdGRpcicpLnRoZW4oZmlsZUluZm9zID0+IHtcbiAgICAgIGV4cGVjdChmaWxlSW5mb3MpLnRvRXF1YWwoW1xuICAgICAgICB7XG4gICAgICAgICAgZmlsZW5hbWU6ICdoZWFkZXJBLmgnLFxuICAgICAgICAgIHBhdGg6ICcuL3Rlc3RkaXIvaGVhZGVyQS5oJyxcbiAgICAgICAgICBsZXZlbDogMSxcbiAgICAgICAgICBpbmNsdWRlczogWydoZWFkZXJCLmgnXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZmlsZW5hbWU6ICdoZWFkZXJCLmgnLFxuICAgICAgICAgIHBhdGg6ICcuL3Rlc3RkaXIvbmVzdGVkZGlyL2hlYWRlckIuaCcsXG4gICAgICAgICAgbGV2ZWw6IDUsXG4gICAgICAgICAgaW5jbHVkZXM6IFsndGVzdGVyLmgnLCAnZG9nLmgnXVxuICAgICAgICB9XG4gICAgICBdKVxuICAgIH0pXG4gIH0pXG5cbiAgaXQoJ2RldGVjdHMgbWlzc2luZyBmaWxlcycsICgpID0+IHtcbiAgICByZXR1cm4gY2hlY2tlci5ydW5JbnNwZWN0aW9uKCcuL3Rlc3RkaXInKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdkZXRlY3RzIHdoZW4gbGV2ZWxzIGFyZSBtaXNtYXRjaGVkJywgKCkgPT4ge1xuICAgIHJldHVybiBjaGVja2VyLnJ1bkluc3BlY3Rpb24oJy4vdGVzdGRpcjQnKS5jYXRjaChlcnJvciA9PiB7XG4gICAgICBleHBlY3QoZXJyb3IpLnRvQmVEZWZpbmVkKClcbiAgICB9KVxuICB9KVxuXG4gIGl0KCdwYXNzZXMgd2hlbiBldmVyeXRoaW5nIGlzIG9rYXknLCAoKSA9PiB7XG4gICAgcmV0dXJuIGV4cGVjdChjaGVja2VyLnJ1bkluc3BlY3Rpb24oJy4vdGVzdGRpcjInKSkucmVzb2x2ZXMudG9CZSgpXG4gIH0pXG59KVxuIl19